#!/usr/bin/env python3
import logging
import pathlib
import subprocess
import sys
from typing import List, Optional

PROJECT_ROOT = pathlib.Path(__file__).parent.parent.parent.absolute()


def get_logger(name: str, loglevel=logging.INFO) -> logging.Logger:
    logger = logging.getLogger(name)
    formatter = logging.Formatter('%(levelname)s \t|%(asctime)s \t| %(name)s \t|  %(message)s')

    console_handler: logging.StreamHandler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    console_handler.setLevel(loglevel)

    logger.setLevel(loglevel)
    logger.addHandler(console_handler)
    return logger


logger = get_logger("CommitCheck")


class LintError(Exception):
    pass


def get_err_from_popen(out, err) -> Optional[str]:
    error: Optional[str] = None
    if err:
        error = err.decode("utf-8")
    elif out:
        error = out.decode("utf-8")
    return error


def lint():
    def _run_flake():
        logger.info("Running Flake8")
        result = subprocess.Popen('flake8 ./easy_telegram'.split(" "), cwd=PROJECT_ROOT)
        out, err = result.communicate()

        if result.returncode != 0:
            error = get_err_from_popen(out, err)
            raise LintError(f"Flake8 failed{': ' + error if error else ''}")
        logger.info("Flake8: success")

    def _run_pylint():
        logger.info("Running PyLint")
        result = subprocess.Popen('pylint ./easy_telegram'.split(" "), cwd=PROJECT_ROOT)
        out, err = result.communicate()

        if result.returncode != 0:
            error = get_err_from_popen(out, err)
            raise LintError(f"PyLint failed{': ' + error if error else ''}")
        logger.info("PyLint: success")

    def _run_mypy():
        logger.info("Running MyPy")
        result = subprocess.Popen('mypy ./easy_telegram'.split(" "), cwd=PROJECT_ROOT)
        out, err = result.communicate()

        if result.returncode != 0:
            error = get_err_from_popen(out, err)
            raise LintError(f"MyPy failed{': ' + error if error else ''}")
        logger.info("MyPy: success")

    errors: List[LintError] = []
    try:
        _run_flake()
    except LintError as e:
        errors.append(e)
    try:
        _run_pylint()
    except LintError as e:
        errors.append(e)
    try:
        _run_mypy()
    except LintError as e:
        errors.append(e)

    if errors:
        raise LintError("\n\n".join(map(lambda err: str(err), errors)))


def args_check() -> bool:
    if len(sys.argv) < 2:
        print("Commit message is missing")
        return False
    if len(sys.argv) > 2:
        arg_string = ", ".join(sys.argv)
        print(f"Too many arguments ('{arg_string}')")
        return False
    return True


def main():
    if not args_check():
        exit(1)

    with open(sys.argv[1]) as file:
        commit_msg = file.read()
    # hotfixes do not have to run the commit checks, due to its urgency
    pass_words = ["hot-fix", "hot fix", "hotfix"]
    if any(x in commit_msg.lower() for x in pass_words):
        print("Hotfix detected, skipping checks")
        exit(0)

    try:
        logger.info("Start linting")
        lint()
    except LintError as e:
        logger.warning(f"Failed linting: {e}")


if __name__ == '__main__':
    main()
